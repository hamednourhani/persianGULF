{
  "name": "grunt-curl",
  "description": "Download files from the internet via grunt.",
  "version": "2.1.0",
  "homepage": "https://github.com/twolfson/grunt-curl",
  "author": {
    "name": "Todd Wolfson",
    "email": "todd@twolfson.com",
    "url": "http://twolfson.com/"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/twolfson/grunt-curl.git"
  },
  "bugs": {
    "url": "https://github.com/twolfson/grunt-curl/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/twolfson/grunt-curl/blob/master/LICENSE-MIT"
    }
  ],
  "main": "grunt.js",
  "bin": {
    "grunt-curl": "bin/grunt-curl"
  },
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "rm -r test/actual 2> /dev/null; mocha"
  },
  "dependencies": {
    "async": "~0.2.10",
    "grunt-retro": "~0.7.0",
    "lodash": "~2.4.1",
    "request": "~2.51.0"
  },
  "_devDependencies": {
    "grunt": "~0.3.17",
    "doubleshot": "~2.13.1",
    "chai": "~1.5.0",
    "grunt-contrib-clean": "~0.3.2",
    "express": "~3.4.4"
  },
  "devDependencies": {
    "chai": "~1.9.0",
    "express": "~3.4.4",
    "grunt": "~0.4.0",
    "grunt-cli": "~0.1.13",
    "grunt-contrib-clean": "~0.5.0",
    "mocha": "~1.18.2",
    "shell-quote": "~1.4.1"
  },
  "keywords": [
    "gruntplugin",
    "grunt",
    "curl",
    "download",
    "request",
    "file",
    "url",
    "uri"
  ],
  "readme": "# grunt-curl [![Build status](https://travis-ci.org/twolfson/grunt-curl.png?branch=master)](https://travis-ci.org/twolfson/grunt-curl)\n\nDownload files from the internet via [grunt][].\n\nThis was created for dependency management via [`grunt-curl`][] and [`grunt-zip`][] as a low-tech alternative to `bower` and similar solutions.\n\nhttp://twolfson.com/2014-01-19-low-tech-dependency-management-via-grunt-tasks\n\n[grunt]: http://gruntjs.com/\n[`grunt-curl`]: https://github.com/twolfson/grunt-curl\n[`grunt-zip`]: https://github.com/twolfson/grunt-zip\n\n## Getting Started\n`grunt-curl` can be installed via npm: `npm install grunt-curl`\n\nThen, add and configure it in your grunt file:\n\n```js\nmodule.exports = function (grunt) {\n  // Configure `curl` with URLs\n  // If you would like to download multiple files\n  // to the same directory, there is `curl-dir`\n  grunt.initConfig({\n    curl: {\n      'location/to/download/github.html': 'http://github.com/',\n    }\n  });\n\n  // Load in `grunt-curl`\n  grunt.loadNpmTasks('grunt-curl');\n};\n```\n\nNow, we can run our task:\n\n```bash\n$ grunt curl\nRunning \"curl:location/to/download/github.html\" (curl) task\nFile \"location/to/download/github.html\" created.\n\nDone, without errors.\n```\n\n## Documentation\n`grunt-curl` creates 2 `grunt` tasks for you to use/configure, `curl` and `curl-dir`. `curl` is designed for downloading single files at a time. `curl-dir` is designed for downloading multiple files to a common directory.\n\nBoth tasks support accepting [`request`] parameters as a `src` file. [Here is an example creating a `POST` request][post-example].\n\n[`request`]: https://github.com/mikeal/request\n[post-example]: #using-request-options\n\n### `curl`\nWe support 2 different formats for configuring `curl`.\n\n#### Short format\nThe short format relies on [`grunt's` support of `{dest: src}`][grunt-short-format]\n\n[grunt-short-format]: http://gruntjs.com/configuring-tasks#older-formats\n\n```js\ncurl: {\n  'location/to/download/file.js': 'http://files.com/path/to/file.js'\n}\n```\n\nThis format is suggested only if you don't need to run `curl` tasks separately\n\n```bash\ngrunt curl\n```\n\nIf you want to run this task standalone, it must be executed via:\n\n```bash\ngrunt curl:dest\n# grunt curl:location/to/download/file.js\n```\n\n#### Long format\n```js\ncurl: {\n  'task-name': {\n    src: 'http://files.com/path/to/file.js',\n    dest: 'location/to/download/file.js'\n  }\n}\n```\n\nThis can be run standalone via\n\n```bash\ngrunt curl:task-name\n```\n\n#### Using request options\nThis is an example of the long format leveraging [`request`][] parameters for making a `POST` request.\n\n```js\ncurl: {\n  'task-name': {\n    src: {\n      url: 'http://files.com/path/to/file.js',\n      method: 'POST',\n      body: 'abc'\n    },\n    dest: 'location/to/download/file.js'\n  }\n}\n```\n\n### `curl-dir`\n`curl-dir` supports 2 configuration formats.\n\n#### Short format\nAs with `curl`, we leverage `grunt's {dest: src}` format for our short format.\n\n```js\n'curl-dir': {\n  // These will be saved as:\n  // 'location/to/save/files/file1.js' and\n  // 'location/to/save/files/file2.js'\n  'location/to/save/files': [\n    'http://files.com/path/to/file1.js',\n    'http://generic.com/scripts/file2.js'\n  ]\n}\n```\n\nAs with before, this can be executed via `grunt curl-dir` but will execute other tasks at the same level. To run this task standalone, it must be run via:\n\n```bash\ngrunt curl-dir:location/to/save/files\n```\n\n#### Long format\n```js\n'curl-dir': {\n  'task-name': {\n    src: [\n      'http://files.com/path/to/file1.js',\n      'http://files.com/path/to/file2.js'\n    ],\n    dest: 'location/to/save/files'\n  }\n}\n```\n\nThis task can be executed from the command line via\n\n```bash\ngrunt curl-dir:task-name\n```\n\n#### Brace expansion\n`curl-dir` supports brace expansion for `src` in both formats.\n\n```js\n'curl-dir': {\n  'brace-expansion': {\n    src: ['http://files.com/path/to/{file1,file2}.js'],\n    // Expands to: [\n    //  'http://files.com/path/to/file1.js',\n    //  'http://files.com/path/to/file2.js'\n    // ]\n    dest: 'location/to/save/files'\n  }\n}\n```\n\n#### Filepath mapping\nURLs can be mapped to custom filepaths via the `router` option in the long format.\n\n```js\n'curl-dir': {\n  'custom-filepaths': {\n    src: [\n      'http://files.com/path/to/file1.js',\n      'http://generic.com/scripts/file2.js'\n    ],\n    router: function (url) {\n      // Save `file1.js` to 'location/to/save/files/hello/world/file1.js'\n      // and `file2.js` to 'location/to/save/files/goodbye/moon/file2.js'\n      var filepath = url.replace('http://files.com/path/to', 'hello/world');\n      return url.replace('http://generic.com/scripts', 'goodbye/moon');\n    },\n    dest: 'location/to/save/files'\n  }\n}\n```\n\n#### Using request options\nAs demonstrated in `curl`, we can use [`request`][] options to leverage special HTTP actions (e.g. make a `POST` request).\n\n```js\n'curl-dir': {\n  custom: {\n    src: [{\n      url: 'http://files.com/path/to/file.js',\n      method: 'POST',\n      body: 'abc'\n    }],\n    dest: 'location/to/save/files'\n  }\n}\n```\n\n## Examples\n### Using a proxy\nUsing [`request`][] options we can add a proxy to our requests\n\n```js\ncurl: {\n  custom: {\n    src: {\n      url: 'http://google.com',\n      proxy: 'http://127.0.0.1:9001/'\n    },\n    dest: 'google.html'\n  }\n}\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint your code using [grunt][grunt] and test via `npm test`.\n\n## Donating\nSupport this project and [others by twolfson][gittip] via [gittip][].\n\n[![Support via Gittip][gittip-badge]][gittip]\n\n[gittip-badge]: https://rawgithub.com/twolfson/gittip-badge/master/dist/gittip.png\n[gittip]: https://www.gittip.com/twolfson\n\n## Unlicense\nAs of Jun 14 2014, Todd Wolfson has released this repository and its contents to the public domain.\n\nIt has been released under the [UNLICENSE][].\n\n[UNLICENSE]: UNLICENSE\n\nPrior to Jun 14 2014, this repository and its contents were licensed under the [MIT license][].\n\n[MIT license]: https://github.com/twolfson/grunt-curl/blob/1.5.1/LICENSE-MIT\n",
  "readmeFilename": "README.md",
  "_id": "grunt-curl@2.1.0",
  "_from": "grunt-curl@*"
}
